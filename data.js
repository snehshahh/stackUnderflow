const comparisonData = {
    Python: {
        Syntax: "More concise and readable",
        Paradigm: "Multi-paradigm (procedural, object-oriented, functional)",
        Compilation: "Interpreted language",
        Performance: "Generally slower than compiled languages",
        Typing: "Dynamically typed",
        Libraries: "Extensive, large community-driven packages",
        MemoryManagement: "Automatic garbage collection with reference counting",
        Concurrency: "Supports synchronous and asynchronous programming (asyncio)",
        Closures: "Supported, captures variables from outer function",
        CommunitySupport: "Large and active community",
        Scalability: "Good for small-to-medium scale projects",
        Deployment: "Portable, easy to deploy on various platforms",
        ErrorHandling: "Uses exceptions with try-except blocks",
        Frameworks: "Django, Flask, TensorFlow",
        Ecosystem: "Rich ecosystem for web, data science, AI",
        CrossPlatformSupport: "Supported on Windows, macOS, Linux",
        Security: "Supports secure coding practices, extensive libraries",
        LearningCurve: "Easy to learn for beginners",
        UseCases: "Web development, data analysis, AI/ML",
        MemoryEfficiency: "Automatic memory management, relatively memory-heavy",
        DebuggingTools: "IDEs like PyCharm, VSCode with debugging support",
        Multithreading: "Limited due to GIL, supports multiprocessing",
        FunctionalProgramming: "First-class functions, support for lambdas",
        PackageManagement: "pip",
        API: "Supports REST API development",
        CommunityResources: "Large amount of tutorials and documentation"
    },
    CSharp: {
        Syntax: "More verbose and strict",
        Paradigm: "Strongly object-oriented",
        Compilation: "Compiled language",
        Performance: "Faster than Python",
        Typing: "Statically typed",
        Libraries: "Extensive, large .NET ecosystem",
        MemoryManagement: "Automatic garbage collection by .NET CLR",
        Concurrency: "Supports async/await for asynchronous programming",
        Closures: "Supported, uses captured variables in lambdas",
        CommunitySupport: "Supported by Microsoft and .NET community",
        Scalability: "Suitable for enterprise-level applications",
        Deployment: "Dependent on .NET Framework or .NET Core",
        ErrorHandling: "Uses exceptions with try-catch blocks",
        Frameworks: "ASP.NET, Unity, Xamarin",
        Ecosystem: "Strong for enterprise, web, and gaming applications",
        CrossPlatformSupport: "Supported on Windows, macOS, Linux (with .NET Core)",
        Security: "Built-in security features in .NET framework",
        LearningCurve: "Moderate, depends on familiarity with C-like syntax",
        UseCases: "Enterprise applications, game development, web services",
        MemoryEfficiency: "Efficient with garbage collection and memory management",
        DebuggingTools: "Visual Studio with advanced debugging support",
        Multithreading: "Good support for multithreading with async/await",
        FunctionalProgramming: "Supports LINQ, delegates, and lambdas",
        PackageManagement: "NuGet",
        API: "ASP.NET for web APIs",
        CommunityResources: "Good documentation, but more enterprise-focused"
    },
    TypeScript: {
        Syntax: "Superset of JavaScript with static typing",
        Paradigm: "Multi-paradigm (procedural, object-oriented, functional)",
        Compilation: "Compiled to JavaScript",
        Performance: "Similar to JavaScript, optimized for modern browsers",
        Typing: "Statically typed (with optional strict typing)",
        Libraries: "Extensive, large JavaScript ecosystem with added type definitions",
        MemoryManagement: "Automatic garbage collection (inherited from JavaScript)",
        Concurrency: "Primarily asynchronous (callbacks, promises, async/await)",
        Closures: "Supported, inner functions access outer scope",
        CommunitySupport: "Large community, especially for web development",
        Scalability: "Good for both small and large-scale applications",
        Deployment: "Compiles to JavaScript, runs on any JavaScript environment",
        ErrorHandling: "Uses exceptions with try-catch blocks",
        Frameworks: "Angular, React, Vue, NestJS",
        Ecosystem: "Massive JavaScript ecosystem with type-safe tools",
        CrossPlatformSupport: "Supported on Windows, macOS, Linux",
        Security: "Similar to JavaScript, relies on secure coding practices",
        LearningCurve: "Moderate, due to the learning of types and stricter rules",
        UseCases: "Web development, front-end and back-end development",
        MemoryEfficiency: "Similar to JavaScript, automatic memory management",
        DebuggingTools: "VSCode with integrated TypeScript support",
        Multithreading: "Single-threaded, supports async programming",
        FunctionalProgramming: "First-class functions, supports higher-order functions",
        PackageManagement: "npm, yarn",
        API: "Supports REST API development with type safety (e.g., using NestJS)",
        CommunityResources: "Vast documentation, tutorials, and forums"
    },
    JavaScript: {
        Syntax: "Flexible, loosely typed",
        Paradigm: "Multi-paradigm (procedural, object-oriented, functional)",
        Compilation: "Interpreted (in browsers) or compiled (in Node.js)",
        Performance: "Depends on environment, optimized for browsers",
        Typing: "Dynamically typed",
        Libraries: "Extensive, especially for web development",
        MemoryManagement: "Automatic garbage collection (mark-and-sweep)",
        Concurrency: "Primarily asynchronous (callbacks, promises, async/await)",
        Closures: "Fundamental, inner functions access outer scope",
        CommunitySupport: "Large community, especially in web development",
        Scalability: "Good for client-side and server-side web applications",
        Deployment: "Runs in web browsers and Node.js environments",
        ErrorHandling: "Uses exceptions with try-catch blocks",
        Frameworks: "React, Angular, Node.js, Express",
        Ecosystem: "Massive ecosystem, mainly for web development",
        CrossPlatformSupport: "Supported on Windows, macOS, Linux",
        Security: "Potential security risks with untrusted scripts in browsers",
        LearningCurve: "Easy for beginners, widely taught",
        UseCases: "Web development, full-stack development, server-side scripting",
        MemoryEfficiency: "Automatic memory management",
        DebuggingTools: "Browser developer tools, VSCode",
        Multithreading: "Single-threaded, supports async programming",
        FunctionalProgramming: "First-class functions, supports higher-order functions",
        PackageManagement: "npm",
        API: "Express for REST APIs",
        CommunityResources: "Vast documentation, tutorials, forums"
    },
    Java: {
        Syntax: "Verbose, similar to C/C++",
        Paradigm: "Object-oriented, class-based",
        Compilation: "Compiled to bytecode, runs on JVM",
        Performance: "Generally slower than C# or Go, but optimized by JVM",
        Typing: "Statically typed",
        Libraries: "Extensive, especially in enterprise applications",
        MemoryManagement: "Automatic garbage collection in JVM",
        Concurrency: "Strong support for multi-threading and concurrency",
        Closures: "Supported through anonymous classes and lambdas",
        CommunitySupport: "Large, especially in enterprise and Android development",
        Scalability: "Suitable for large-scale, enterprise-level applications",
        Deployment: "Runs on the Java Virtual Machine (JVM)",
        ErrorHandling: "Uses exceptions with try-catch blocks",
        Frameworks: "Spring, Hibernate",
        Ecosystem: "Large ecosystem, particularly in enterprise and Android",
        CrossPlatformSupport: "Runs on any platform with JVM",
        Security: "Built-in security features (e.g., Secure Socket Layer)",
        LearningCurve: "Steep for beginners due to verbosity and class-based structure",
        UseCases: "Enterprise software, Android development, large systems",
        MemoryEfficiency: "Efficient with JVM optimizations",
        DebuggingTools: "Eclipse, IntelliJ IDEA",
        Multithreading: "Strong support for multi-threading",
        FunctionalProgramming: "Support for lambdas and functional-style programming",
        PackageManagement: "Maven, Gradle",
        API: "Java APIs for web services, database access",
        CommunityResources: "Extensive, especially for enterprise applications"
    },
    Go: {
        Syntax: "Simple, concise, similar to C",
        Paradigm: "Procedural, supports concurrency",
        Compilation: "Compiled to machine code",
        Performance: "Very fast, designed for high-performance systems",
        Typing: "Statically typed",
        Libraries: "Growing ecosystem, particularly for web and cloud development",
        MemoryManagement: "Automatic garbage collection",
        Concurrency: "Built-in support with goroutines and channels",
        Closures: "Supported, often used in goroutines for concurrency",
        CommunitySupport: "Strong, growing rapidly in cloud computing and DevOps",
        Scalability: "Excellent for distributed systems and microservices",
        Deployment: "Portable, single binary deployment",
        ErrorHandling: "Uses explicit error handling (returning errors)",
        Frameworks: "Gin, Beego",
        Ecosystem: "Strong for cloud, DevOps, microservices",
        CrossPlatformSupport: "Supported on major OS platforms",
        Security: "Minimal, explicit error handling reduces risk of bugs",
        LearningCurve: "Easy to learn, minimalistic design",
        UseCases: "Cloud applications, microservices, DevOps tools",
        MemoryEfficiency: "Efficient memory usage, designed for concurrency",
        DebuggingTools: "Built-in debugging tools (e.g., Delve)",
        Multithreading: "Supports concurrency natively with goroutines",
        FunctionalProgramming: "Limited functional programming support",
        PackageManagement: "Go modules",
        API: "Gin for web APIs",
        CommunityResources: "Rapidly growing community and resources"
    },
    Rust: {
        Syntax: "Curly-brace, similar to C++",
        Paradigm: "Multi-paradigm (procedural, object-oriented, functional)",
        Compilation: "Compiled to machine code",
        Performance: "Extremely fast, on par with C/C++",
        Typing: "Statically typed, with a focus on memory safety",
        Libraries: "Growing ecosystem, particularly for systems programming",
        MemoryManagement: "Ownership-based memory management, no garbage collection",
        Concurrency: "Built-in support for concurrency with fearless concurrency",
        Closures: "Supported, with access to outer variables",
        CommunitySupport: "Rapidly growing, especially in systems programming",
        Scalability: "Suitable for high-performance, low-level systems",
        Deployment: "Portable, single binary deployment",
        ErrorHandling: "Uses Result and Option types for error handling",
        Frameworks: "Rocket, Actix",
        Ecosystem: "Strong for systems programming, embedded development",
        CrossPlatformSupport: "Supported on major OS platforms",
        Security: "Focus on memory safety and preventing concurrency bugs",
        LearningCurve: "Moderate, due to ownership model",
        UseCases: "Systems programming, performance-critical applications",
        MemoryEfficiency: "Highly efficient with zero-cost abstractions",
        DebuggingTools: "Rust built-in tools, GDB support",
        Multithreading: "Strong support for multithreading, thread safety",
        FunctionalProgramming: "Supports functional programming features like pattern matching",
        PackageManagement: "Cargo",
        API: "Rocket and Actix for web APIs",
        CommunityResources: "Growing community with strong documentation"
    }
};

